@page "/editemployee"
@page "/editemployee/{Id:int}"
@using EMS.models
@inject EmployeesClient EmployeesClient
@inject DepartmentsClient DepartmentsClient
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

@inject ILogger<EmployeeForm> Log

<PageTitle>@(Id is not null ? $"Editer Employé | id = {Id}" : "Ajouter Employé")</PageTitle>

@if (employee is null || Departments is null)
{
    <Loading />
}
else
{


    <div class="row pt-4">
    <div class="col-md-6 col-lg-4 mx-auto">
        <div class="card shadow" style="min-width: 400px">
            <div class="card-header text-center">

                @if (Id is not null)
                    {
                        <h5 class="card-title"><span>ID : </span><span class="text-primary lead">@employee.Id</span>
                        </h5>
                    }
                    else
                    {
                        <h4> <span class="text-primary card-title "><i class="bi bi-person-add"></i> Nouveau
                                Employé</span></h4>
                    }

                </div>
                <div class="card-body">
                    <EditForm Model="employee" FormName="EmployeeForm" OnValidSubmit="HandleSubmitAsync">

                        <DataAnnotationsValidator />
                        <div class="mb-3 form-floating">
                            <InputText id="Name" @bind-Value="employee.Name" placeholder="Nom" class="form-control" />
                            <label for="Name" class="form-label">Nom</label>
                            <ValidationMessage For="()=>employee.Name" />
                        </div>


                        <div class="mb-3 form-floating">
                            <InputText id="Email" @bind-Value="employee.Email" placeholder="Email" class="form-control" />
                            <label for="Email" class="form-label">Email</label>
                            <ValidationMessage For="()=>employee.Email" />
                        </div>
                        <div class="mb-3 form-floating">
                            <InputSelect id="status" @bind-Value="employee.DepartmentId" placeholder="Departement"
                                class="form-select">

                                @foreach (var department in Departments)
                                {
                                    <option value="@department.Id">@department.Name</option>
                                }
                             
                            </InputSelect>
                            <label for="Department" class="form-label">Department</label>

                            <ValidationMessage For="()=>employee.DepartmentId" />
                        </div>

                         
                        <div class="mb-3 form-floating">
                         <div class="border-bottom mb-3">Status</div>
                            <InputRadioGroup id="status" TValue="string" @bind-Value="employee.Status" class="form-check">

                                  <div class="form-check form-check-inline">
                                    <InputRadio ckecked="true" value="Intern" TValue="string" class="form-check-input" type="radio"
                                        id="2" />
                                    <label class="form-check-label text-small" for="2">Stagiaire</label>
                                </div>
                                <div class="form-check form-check-inline">
                                    <InputRadio value="Permanent" TValue="string" class="form-check-input" type="radio"
                                        id="1" />
                                    <label class="form-check-label text-small" for="1">Titulaire</label>
  
                                </div>
                              
                                <div class="form-check form-check-inline">
                                    <InputRadio value="Retired" TValue="string" class="form-check-input" type="radio"
                                        id="3" />
                                    <label class="form-check-label text-small" for="3">Retraité(e)</label>
                                </div>
                                <div class="form-check form-check-inline">
                                    <InputRadio value="Fired" TValue="string" class="form-check-input" type="radio"
                                        id="3" />
                                    <label class="form-check-label text-small" for="3">Viré(e)</label>
                                </div>
                            </InputRadioGroup>
                        </div>




                        <div class="mb-3 form-floating">
                            <InputNumber id="Salary" @bind-Value="employee.Salary" class="form-control"
                                placeholder="Salaire (DHs)"  />
                            <label for="Salary" class="form-label">Salaire (DHs)</label>
                            <ValidationMessage For="()=>employee.Salary" />

                        </div>
                        <div class="mb-3 form-floating">
                            <InputDate id="HireDate" @bind-Value="employee.HireDate" class="form-control"
                                placeholder="Date d'embauche" />
                            <label for="HireDate" class="form-label">Date d'embauche</label>
                            <ValidationMessage For="()=>employee.HireDate" />

                        </div>
                        <hr>
                        <div class="d-grid mt-3">
                            <button type="submit" class="btn btn-outline-primary">@(Id is not null ? "Mise à jour" :
                            "Ajouter")</button>

                        </div>
                    </EditForm>
                </div>

            </div>

        </div>


    </div>

}


@code {
    [Inject]
    private ILogger<EmployeeForm>? Logger { get; set; }


    [Parameter]
    public int? Id { get; set; }

    [SupplyParameterFromForm]
    public Employee? employee { get; set; }


    private Department[]? Departments { get; set; } 


    protected override async Task OnInitializedAsync()
    {
        Departments  = await DepartmentsClient.GetDepartmentsAsync();
    }

    protected override async Task OnParametersSetAsync()
    {

        if (employee is not null)
        {
            return;
        }
        if (Id is not null)
        {
            employee = await EmployeesClient.GetEmployeeAsync(Id.Value);
           
        }
        else
        {
            employee = new Employee
                {
                    Name = "",
                    Email = "",
                    HireDate = DateOnly.FromDateTime(DateTime.Now),
                    DepartmentId = 0,
                    Salary = 0,
                    Status = "Intern"
                };
        }
    }

    private async Task HandleSubmitAsync()
    {
        ArgumentNullException.ThrowIfNull(employee);
       
        if (Id is null)
        {
            Log.LogCritical(employee.HireDate.ToString());
            await EmployeesClient.AddEmployeeAsync(employee);
        }
        else
        {
            employee.Id = Id.Value;
            Log.LogWarning(employee.ToString());
            await EmployeesClient.UpdateEmployeeAsync(employee);
        }

        NavigationManager.NavigateTo("/list");
    }

   
    

    
}
