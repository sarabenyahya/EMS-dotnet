@page "/list"
@using EMS.Models
@using EMS.Helpers
@using System.Globalization
@inject IJSRuntime JS


@inject EmployeesClient EmployeesClient

@rendermode InteractiveServer
@attribute [StreamRendering]

<PageTitle>Liste des Employés</PageTitle>

<div class="container mx-auto mt-5">

    <h1 class="pb-2 mb-3 list">Liste des Employés</h1>
    @if (employees == null)
    {
        <Loading />
        
    }
    else
    {
        <div class="shadow  rounded p-3 transparent-table">
            @if(employees.Length >= PageSize){
             <Pagination 
            Items="employees"
            PageSize="PageSize"
            OnPageChanged="EventCallback.Factory.Create<EmployeeSummary[]>(this, HandlePageChanged)"
          />
        }
        <table class="table transparent-table table-hover">
            <thead >
                <tr>
                    <th>Nom</th>
                    <th class="d-none d-xl-table-cell">Email</th>
                    <th>Département</th>
                    <th class="d-none d-xl-table-cell">Statut</th>
                    <th class="text-end d-none d-xl-table-cell">Date d'embauche</th>
                    <th class="text-center" >Salaire</th>
                    <th class="text-end">Actions</th>
                </tr>
            </thead>
            <tbody>
                @if(currentPageEmployees is null){
                    <p>Aucun Employés Trouvés!!</p>
                }
                else
                {
                    @foreach (var employee in currentPageEmployees)
                {
                    <tr>
                        <td>@employee.Name</td>
                        <td class="d-none d-xl-table-cell">@employee.Email</td>
                        <td><span class="badge rounded-pill text-@EmployeeHelper.GetClass(employee.Department)">@employee.Department </span></td>
                        <td class="d-none d-xl-table-cell">@EmployeeHelper.GetStatusFromApi(employee.Status)</td>
                        <td class="text-end d-none d-xl-table-cell">@employee.HireDate.ToString("dd/MM/yyyy")</td>
                        <td class="text-end">@employee.Salary.ToString("#,##0.00", moroccanCulture) DHs</td>
                        <td class="text-end">
                            <a href="/editemployee/@employee.Id" 
                                class="btn btn-sm btn-outline-info"><i class="bi bi-pencil-square"></i></a>
                            <button   class="btn btn-sm btn-outline-danger" data-bs-toggle="modal" data-bs-target="@(GetDeleteModalId(employee))"   data-bs-title="Supprimer"><i
                                    class="bi bi-x-lg"></i></button>

                            <DeleteModal employee="@employee" OnEmployeeDeleted="EmployeeDeleted" />
                        </td>
                    </tr>
                }
                }


                
            </tbody>
        </table>
        
      
       </div>
    }
    <a  href="/editemployee" 
    class="btn btn-primary rounded-circle d-flex justify-content-center align-items-center p-1 "
    using Blazored.SessionStorage;
    style="height: 70px;width: 70px" id="floating-btn" aria-label="Add new item" data-bs-toggle="tooltip"
    data-bs-placement="left" title="Ajouter un nouveau employé">
    <i class="bi bi-person-add" style="font-size: 2.2rem; font-weight: extrabold"></i> <!-- or appropriate icon -->
</a>
</div>






@code {
    private EmployeeSummary[]? employees;
    private EmployeeSummary[]? currentPageEmployees;
    private int PageSize {get; set;} = 10;
    private CultureInfo moroccanCulture = new CultureInfo("fr-FR");
    private Notification? Notification = null;
  

    protected override async Task OnInitializedAsync()
    {
        try{

            employees = await EmployeesClient.GetEmployeesAsync();
            employees = employees.Reverse().ToArray();
            currentPageEmployees = employees.Skip(0).Take(PageSize).ToArray();
        }
        catch(Exception ex)
        {
           Notification = new Notification { Message = "Vérifier la connexion avec le serveur API", Icon = "error" };
           

        }
        
    }

    private string GetDeleteModalId(EmployeeSummary employee)
    {
        return $"#{DeleteModal.GetModalId(employee)}";
    }

    private static string EmployeeUrl(int id) => $"/editEmployee/{id}";
    private void HandlePageChanged(EmployeeSummary[] newPageItems)
    {
      currentPageEmployees =  newPageItems;
    
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (Notification is not null)
        {
            
            await JS.InvokeAsync<string>("alert", Notification.Message);
            Notification = null;
        }
    }

    private  void EmployeeDeleted(int employeeId)
    {
        ArgumentNullException.ThrowIfNull(employees);
        employees = employees.Where(emp => emp.Id != employeeId).ToArray();
        currentPageEmployees = employees.Skip(0).Take(PageSize).ToArray();
        StateHasChanged(); // Trigger UI update
    }
}    
