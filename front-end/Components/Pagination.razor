@typeparam TItem
@using System.Linq

<div>
    <nav aria-label="Page navigation example">
        <ul class="pagination pagination-sm justify-content-center">
            @if (CurrentPage > 1){
                <li class="page-item">
                <button class="page-link" @onclick="() => SetPage(CurrentPage - 1)" aria-label="Previous">
                    <span aria-hidden="true">&laquo;</span>
                </button>
            </li>
            }
            
            @for (int i = 1; i <= TotalPages; i++)
            {
                int currentIndex = i;
                <li class="page-item @(CurrentPage == currentIndex? "active" : "")">
                    <button class="page-link" @onclick="() => SetPage(currentIndex)">@i</button>
                </li>
            }
            @if(CurrentPage < TotalPages){
                <li class="page-item">
                <button class="page-link" @onclick="() => SetPage(CurrentPage + 1)" aria-label="Next">
                    <span aria-hidden="true">&raquo;</span>
                </button>
            </li>
            }
            
        </ul>
    </nav>
</div>

@code {

    [Parameter]
    public TItem[]? Items { get; set; }

    [Parameter]
    public int PageSize { get; set; } = 10;

    [Parameter]
    public EventCallback<TItem[]> OnPageChanged { get; set; }

    private int CurrentPage { get; set; } = 1;

   
    private int TotalPages => Items is null ? 1 :  (int)Math.Ceiling(Items.Length / (double)PageSize);

    private void SetPage(int page)
    {
        CurrentPage = page;
        var currentPageItems = Items.Skip((CurrentPage - 1) * PageSize).Take(PageSize);
        OnPageChanged.InvokeAsync(currentPageItems.ToArray());
    }

}
